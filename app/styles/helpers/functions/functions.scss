@function mq-px2em($px, $base-font-size: $font-size-base) {
    @if unitless($px) {
        @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
        @return mq-px2em($px + 0px); // That may fail.
    } @else if unit($px) == em {
        @return $px;
    }
    @return ($px / $base-font-size) * 1em;
}

@function sprite-svg-attr($icon, $attr) {
    $newIcon: map-get($icons, $icon);
    @if $newIcon == null {
        @warn "Can't find an icon with the name #{$icon}";
    }
    @return map-get($newIcon, $attr);
}

@function icon-svg-attrs($icon) {
    $attrs: (
        width: sprite-svg-attr($icon, width),
        height: sprite-svg-attr($icon, height),
        x: sprite-svg-attr($icon, backgroundX),
        y: sprite-svg-attr($icon, backgroundY)
    );
    @return $attrs;
}

/// Convert a px value to rem
/// @param {px} $val - The desired px size
/// @param {px} $ctx [$base-font-size] - The base px size
/// @return {rem} The px value in rem
@function rem($val, $ctx: $font-size-base) {

  //make sure the divider is not 0
  @if $ctx == 0 {
    @error 'sass-rems: Context cannot be `0`.';
  }
  //return a unit less 0 (best practice)
  @if $val == 0 {
    @return 0
  }
  @if (unit($val) != 'px' or unit($val) != 'px') {
    @error 'sass-rems: Units must be `px`.';
  }
  @return ($val / $ctx) * 1rem;
}

@function em($val, $ctx) {
    @return #{$val/$ctx}em;
}